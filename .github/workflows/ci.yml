name: ci

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  id-token: write     # needed for keyless signing (Cosign)
  contents: read
  packages: write     # push to GHCR

jobs:
  quality:
    name: Lint • Typecheck • Schema • Tests
    runs-on: ubuntu-latest
    env:
      SCHEMA_REG_URL: ${{ secrets.SCHEMA_REG_URL }}
      OPENML_API_KEY: ${{ secrets.OPENML_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          # Project deps (support both styles)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then pip install -e .[dev] || true; fi
          # CI tools and test libs
          pip install pytest hypothesis avro jsonschema requests openml click fastavro ruff black mypy || true

      - name: Lint (ruff + black --check)
        run: |
          ruff check .
          black --check .

      - name: Typecheck (mypy; non-blocking)
        run: mypy src || true

      - name: Schema compatibility (Avro parse)
        run: |
          if [ -f schemas/order_v1.avsc ]; then
            python - <<'PY'
            import json
            from pathlib import Path
            import fastavro as fa
            p = Path('schemas/order_v1.avsc')
            with p.open() as f:
                schema = json.load(f)
            fa.parse_schema(schema)
            print('Avro schema parsed OK (TODO: add registry backward-transitive check).')
            PY
          else
            echo "No schemas/order_v1.avsc; skipping schema parse."
          fi

      - name: Tests (pytest)
        run: pytest -q

  build_sign_image:
    name: Build • SBOM • Cosign sign & verify
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4

      - name: Ensure Dockerfile (fallback to scratch)
        run: |
          if [ -f Dockerfile ]; then
            echo "DOCKERFILE=Dockerfile" >> $GITHUB_ENV
          else
            echo "FROM scratch" > /tmp/Dockerfile
            echo "LABEL org.opencontainers.image.source=${{ github.repository }}" >> /tmp/Dockerfile
            echo "DOCKERFILE=/tmp/Dockerfile" >> $GITHUB_ENV
            echo "Using fallback scratch Dockerfile."
          fi

      - name: Build image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/router:${{ github.sha }} -f "$DOCKERFILE" "$(dirname "$DOCKERFILE")"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: docker push ghcr.io/${{ github.repository_owner }}/router:${{ github.sha }}

      - name: SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository_owner }}/router:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Cosign sign (keyless)
        run: cosign sign --yes ghcr.io/${{ github.repository_owner }}/router:${{ github.sha }}

      - name: Cosign verify (gate)
        run: cosign verify --certificate-oidc-issuer https://token.actions.githubusercontent.com ghcr.io/${{ github.repository_owner }}/router:${{ github.sha }}

      - name: Scorecard
        run: |
          mkdir -p artifacts
          if [ -f tools/scorecard/dp_scorecard.py ]; then
            if [ -f tools/scorecard/emit_metrics_example.json ]; then
              cp tools/scorecard/emit_metrics_example.json artifacts/score_inputs.json
            else
              echo '{}' > artifacts/score_inputs.json
            fi
            python tools/scorecard/dp_scorecard.py artifacts/score_inputs.json
          else
            echo "No tools/scorecard/dp_scorecard.py; skipping."
          fi

  policy_enforce:
    name: K8s policy enforcement (kubeconform)
    runs-on: ubuntu-latest
    needs: build_sign_image
    steps:
      - uses: actions/checkout@v4
      - name: Validate K8s manifests (strict)
        run: |
          curl -sSL https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
          ./kubeconform -summary -strict -ignore-missing-schemas infra/k8s
