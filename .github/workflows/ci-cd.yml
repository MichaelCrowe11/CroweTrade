name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual run"
        required: false
        default: "manual deploy"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
        ruff format --check src/ tests/
        
    - name: Type check with mypy
      run: |
        mypy src/
        
    - name: Run tests
      run: |
        pytest tests/ \
          --cov=src/crowetrade \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=test-results.xml
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Run Safety vulnerability scan
      run: |
        pip install safety
        safety check --json --output safety-report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [portfolio, execution, signal, risk, data]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to staging
      run: |
        helm upgrade --install crowetrade-staging ./helm \
          --namespace cl-staging \
          --create-namespace \
          --values ./helm/values-staging.yaml \
          --set global.imageTag=${{ github.sha }} \
          --wait --timeout=10m
          
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=crowetrade-staging -n cl-staging --timeout=300s
        # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        
    - name: Deploy to production
      run: |
        helm upgrade --install crowetrade-prod ./helm \
          --namespace cl-live \
          --values ./helm/values-production.yaml \
          --set global.imageTag=${{ github.sha }} \
          --wait --timeout=15m
          
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=crowetrade-prod -n cl-live --timeout=600s
        # Add comprehensive health checks here
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run load tests
      run: |
        # Add load testing commands (e.g., k6, locust)
        echo "Load testing placeholder"
        
    - name: Generate performance report
      run: |
        echo "Performance report placeholder"

  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [portfolio, execution, signal, risk, data]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-fly:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Install jq (for JSON parsing)
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Ensure Fly apps exist
      env:
        FLY_API_TOKEN: ${{ secrets.FLYIO_TOKEN }}
        FLY_ORG: ${{ secrets.FLY_ORG }}
      run: |
        set -euo pipefail
        ensure_app() {
          APP_NAME="$1"
          if flyctl apps show "$APP_NAME" >/dev/null 2>&1; then
            echo "App $APP_NAME exists"
          else
            echo "Creating app $APP_NAME"
            if [ -n "${FLY_ORG:-}" ]; then
              flyctl apps create "$APP_NAME" --org "$FLY_ORG"
            else
              flyctl apps create "$APP_NAME"
            fi
          fi
        }
        ensure_app crowetrade-execution
        ensure_app crowetrade-portfolio

    - name: Sync secrets to Fly (OpenML)
      env:
        FLY_API_TOKEN: ${{ secrets.FLYIO_TOKEN }}
        OPENML_API_KEY: ${{ secrets.OPENML_API_KEY }}
      run: |
        if [ -n "${OPENML_API_KEY}" ]; then
          flyctl secrets set OPENML_API_KEY="$OPENML_API_KEY" --app crowetrade-execution --stage
          flyctl secrets set OPENML_API_KEY="$OPENML_API_KEY" --app crowetrade-portfolio --stage
        else
          echo "OPENML_API_KEY secret not set in GitHub; skipping."
        fi

    - name: Deploy Execution service
      env:
        FLY_API_TOKEN: ${{ secrets.FLYIO_TOKEN }}
      run: |
        EXEC_TAG="${{ github.ref_name }}-${{ github.sha }}"
        flyctl deploy --config ./fly.execution.toml \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-execution:${EXEC_TAG} \
          --now --detach

    - name: Deploy Portfolio service
      env:
        FLY_API_TOKEN: ${{ secrets.FLYIO_TOKEN }}
      run: |
        PORT_TAG="${{ github.ref_name }}-${{ github.sha }}"
        flyctl deploy --config ./fly.portfolio.toml \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-portfolio:${PORT_TAG} \
          --now --detach

    - name: Verify health (Execution)
      env:
        FLY_API_TOKEN: ${{ secrets.FLYIO_TOKEN }}
      run: |
        set -euo pipefail
        APP="crowetrade-execution"
        JSON=$(flyctl status --app "$APP" --json)
        HOST=$(echo "$JSON" | jq -r '(.hostname // .Hostname // .App.Status.Hostname // empty)')
        echo "Execution hostname: ${HOST:-<none>}"
        if [ -z "${HOST}" ]; then
          echo "flyctl status JSON:" && echo "$JSON" | jq '.'
          exit 1
        fi
        curl -fsS "https://${HOST}/health"

    - name: Verify health (Portfolio)
      env:
        FLY_API_TOKEN: ${{ secrets.FLYIO_TOKEN }}
      run: |
        set -euo pipefail
        APP="crowetrade-portfolio"
        JSON=$(flyctl status --app "$APP" --json)
        HOST=$(echo "$JSON" | jq -r '(.hostname // .Hostname // .App.Status.Hostname // empty)')
        echo "Portfolio hostname: ${HOST:-<none>}"
        if [ -z "${HOST}" ]; then
          echo "flyctl status JSON:" && echo "$JSON" | jq '.'
          exit 1
        fi
        curl -fsS "https://${HOST}/health"
